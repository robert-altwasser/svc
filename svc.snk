import subprocess
import glob
import os
import re
import linecache

workdir: "/data/gpfs-1/users/altwassr_c/scratch/AML/svc"

path_to_mapped = "/data/gpfs-1/users/altwassr_c/scratch/AML/mapped/"
reference_file = "/data/gpfs-1/users/altwassr_c/work/refs/GRCh38.u2af1_fix.v1.2020_04_01.fa"

SAMPLES_files = glob.glob(path_to_mapped + "*.realigned.bam")
SAMPLES = [os.path.basename(re.sub('\.realigned\.bam$', '', i)) for i in SAMPLES_files]

CONTROL = list(filter(lambda x:'AML-N' in x, SAMPLES))
SAMPLES = list(filter(lambda x:'AML-N' not in x, SAMPLES))
### Delly cannot handle merged samples (two IDs)
SAMPLES = list(filter(lambda x:'_total' not in x, SAMPLES))


rule all:
    input:
        expand("calls/{samples}.bcf", samples = SAMPLES),
        expand("calls/{samples}.tsv", samples = SAMPLES),
        "filtered/somatic.vcf",
        "filtered/somatic.gz.tbi",
        "filtered/somatic.tsv",
        "merged/merged_geno.vcf",
        "merged/merged_samples.vcf",

rule sv_call:
    input:
        samples = path_to_mapped + "{sample}.realigned.bam",
        indexes = path_to_mapped + "{sample}.realigned.bam.bai"
    params:
        fasta = reference_file
    log:
         "logs/{sample}_cv_call.txt"
    output:
        sv_call = "calls/{sample}.bcf"
    shell:
        """
           delly call \
               --genome {params.fasta} \
               --outfile {output.sv_call} \
               {input.samples} &> {log}
        """

rule merge_samples:
    input:
        expand("calls/{sample}.bcf", sample = SAMPLES)
    log:
         "logs/merge_samples.txt"
    output:
         "merged/merged_samples.bcf"
    shell:
        """
           delly merge \
               --outfile {output} \
               {input} &> {log}
        """

rule merge_control:
    input:
        expand("calls/{control}.bcf", control = CONTROL)
    log:
         "logs/merge_control.txt"
    output:
         "merged/merged_control.bcf"
    shell:
        """
           delly merge \
               --outfile {output} \
               {input} &> {log}
        """

rule genotyping:
    input:
        samples = path_to_mapped + "{sample}.realigned.bam",
        merged_call = "merged/merged_samples.bcf"
    params:
        fasta = reference_file
    log:
         "logs/{sample}_cv_geno.txt"
    output:
        sv_call = "calls/{sample}_geno.bcf"
    shell:
        """
           delly call \
               --genome {params.fasta} \
               --vcffile {input.merged_call} \
               --outfile {output.sv_call} \
               {input.samples} &> {log}
        """


rule merge_geno:
    input:
        expand("calls/{sample}_geno.bcf", sample = SAMPLES)
    log:
        "logs/merged_geno.txt"
    output:
        "merged/merged_geno.bcf"
    shell:
        """
           bcftools merge \
               -m id \
               --output-type b \
               --output {output} \
               {input} &> {log}
        """

rule index:
    input:
        "{anything}.bcf"
    output:
        "{anything}.bcf.csi"
    shell:
        """
           tabix {input}
        """

rule filter_germline:
    input:
        merged = "merged/merged_geno.bcf",
        index = "merged/merged_geno.bcf.csi"
    log:
        "logs/filter_germline.txt"
    output:
        "filtered/filtered_germline.bcf"
    shell:
        """
        delly filter \
            -f germline \
            -o {output} \
            {input.merged} &> {log}
        """

rule intersect_control:
    input:
        samples = "merged/merged_geno.bcf",
        samples_index = "merged/merged_geno.bcf.csi",
        control = "merged/merged_control.bcf",
        control_index = "merged/merged_control.bcf.csi"
    log:
        "logs/intersect_control.txt"
    output:
        "filtered/somatic.vcf"
    shell:
        """
bcftools isec \
    --prefix temp/ \
    {input.samples} \
    {input.control} \
&&
cp temp/0000.vcf filtered/somatic.vcf
        """

rule vcf2tsv:
    input:
        "{anything}.vcf"
    output:
        "{anything}.tsv"
    params:
        temp = temp("{anything}_temp.tsv")
    shell:
        """
vcf2tsvpy \
    --input_vcf {input} \
    --out_tsv {params.temp} &&
tail -n +2 {params.temp} > {output}
        """

rule zip_index:
    input:
        "{anything}"
    output:
        "{anything}.gz.tbi"
    shell:
        """
        bgzip {input} && tabix {anything}.gz
        """


rule convert_bcf_vcf:
    input:
        "{anything}.bcf"
    output:
        "{anything}.vcf"
    shell:
        """
           bcftools convert \
              --output-type v \
              --output {output} \
              {input}
        """
